
alarm_code.elf:     file format elf32-littlenios2
alarm_code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000017dc memsz 0x000017dc flags r-x
    LOAD off    0x000027fc vaddr 0x000057fc paddr 0x00005978 align 2**12
         filesz 0x0000017c memsz 0x0000017c flags rw-
    LOAD off    0x00002af4 vaddr 0x00005af4 paddr 0x00005af4 align 2**12
         filesz 0x00000000 memsz 0x0000019c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001618  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  00005798  00005798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000017c  000057fc  00005978  000027fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000019c  00005af4  00005af4  00002af4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00005c90  00005c90  00002978  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000440  00000000  00000000  000029a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005113  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001eb8  00000000  00000000  00007ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002233  00000000  00000000  00009dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000057c  00000000  00000000  0000bfe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000191a  00000000  00000000  0000c55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000016e6  00000000  00000000  0000de76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000f55c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d0  00000000  00000000  0000f570  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010ff2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00010ff5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011001  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011002  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00011003  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001100e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00011019  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00011024  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  0001102e  2**0
                  CONTENTS, READONLY
 26 .jdi          00004ea6  00000000  00000000  00011054  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006317e  00000000  00000000  00015efa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00005798 l    d  .rodata	00000000 .rodata
000057fc l    d  .rwdata	00000000 .rwdata
00005af4 l    d  .bss	00000000 .bss
00005c90 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_code_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000042cc l     F .text	000001f4 timer_handler
0000450c l     F .text	000001d0 btns_handler
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lcltime.c
00000000 l    df *ABS*	00000000 lcltime_r.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 month_lengths.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 tzcalc_limits.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 gettzinfo.c
000057fc l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 gmtime_r.c
00000000 l    df *ABS*	00000000 impure.c
0000583c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00005970 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00005b34 g     O .bss	00000004 alt_instruction_exception_handler
00005678 g     F .text	0000002c alt_main
00005b90 g     O .bss	00000100 alt_irq
00005978 g       *ABS*	00000000 __flash_rwdata_start
00005c90 g       *ABS*	00000000 __alt_heap_start
00005b1c g     O .bss	00000004 _daylight
00005af8 g     O .bss	00000004 now
00005790 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00005b00 g     O .bss	00000004 edge_capture
0000593c g     O .rwdata	00000004 hex0
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005b20 g     O .bss	00000004 errno
00005b2c g     O .bss	00000004 alt_argv
0000d91c g       *ABS*	00000000 _gp
00005948 g     O .rwdata	00000004 btn_direction_ptr
00005b04 g     O .bss	00000004 edge_capture_time
00004ccc g     F .text	00000028 memcpy
0000594c g     O .rwdata	00000004 timer_edge_cap_ptr
00005afc g     O .bss	00000002 pos
0000571c g     F .text	00000074 alt_exception_cause_generated_bad_addr
00005b38 g     O .bss	0000002c ts
00004ca4 g     F .text	00000014 malloc
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004860 g     F .text	00000064 .hidden __udivsi3
00005950 g     O .rwdata	00000004 timer_mask_ptr
00004f30 g     F .text	00000050 _sbrk_r
00005944 g     O .rwdata	00000004 btn_mask_ptr
00005964 g     O .rwdata	00000004 _global_impure_ptr
00005c90 g       *ABS*	00000000 __bss_end
00005530 g     F .text	00000068 alt_iic_isr_register
0000523c g     F .text	00000240 gmtime_r
00005518 g     F .text	00000018 alt_ic_irq_enabled
00005af4 g     O .bss	00000004 alarm
00005b08 g     O .bss	00000002 state
00005b24 g     O .bss	00000004 alt_irq_active
00005b0c g     O .bss	00000004 new_time
000040fc g     F .exceptions	00000060 alt_irq_handler
00005934 g     O .rwdata	00000004 hex2
0000522c g     F .text	00000004 __tz_unlock
00005714 g     F .text	00000004 alt_dcache_flush_all
00005978 g       *ABS*	00000000 __ram_rwdata_end
0000595c g     O .rwdata	00000008 _tzname
000057fc g       *ABS*	00000000 __ram_rodata_end
00005974 g     O .rwdata	00000004 jtag_uart_0
000048c4 g     F .text	00000058 .hidden __umodsi3
00005c90 g       *ABS*	00000000 end
00005924 g     O .rwdata	00000004 leds
0000591c g     O .rwdata	00000001 btns_prev
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00005938 g     O .rwdata	00000004 hex1
00006000 g       *ABS*	00000000 __alt_stack_pointer
00004cf4 g     F .text	000000e4 _free_r
00004180 g     F .text	0000003c _start
00005710 g     F .text	00000004 alt_sys_init
00005920 g     O .rwdata	00000004 btns
00005928 g     O .rwdata	00000004 hex5
0000547c g     F .text	00000028 .hidden __mulsi3
000057fc g       *ABS*	00000000 __ram_rwdata_start
00005798 g       *ABS*	00000000 __ram_rodata_start
00005798 g     O .rodata	00000060 __month_lengths
00005954 g     O .rwdata	00000004 timer_control_ptr
00005958 g     O .rwdata	00000004 timer_status_ptr
000044c0 g     F .text	0000004c calc_time
00005c90 g       *ABS*	00000000 __alt_stack_base
000056a4 g     F .text	0000004c sbrk
00005b64 g     O .bss	0000002c alarm_ts
00005228 g     F .text	00000004 __tz_lock
00005af4 g       *ABS*	00000000 __bss_start
0000491c g     F .text	00000050 localtime
000046dc g     F .text	0000008c main
00005b28 g     O .bss	00000004 alt_envp
00006000 g       *ABS*	00000000 __alt_heap_limit
00004dd8 g     F .text	00000158 _malloc_r
00004768 g     F .text	00000084 .hidden __divsi3
00005798 g       *ABS*	00000000 __flash_rodata_start
00004264 g     F .text	00000068 show_time
00005930 g     O .rwdata	00000004 hex3
000056f0 g     F .text	00000020 alt_irq_init
00005968 g     O .rwdata	00000004 _impure_ptr
00005b30 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00005b18 g     O .bss	00000004 _timezone
0000496c g     F .text	00000338 localtime_r
00004020 g       *ABS*	00000000 __ram_exceptions_start
000054a4 g     F .text	00000004 alt_ic_isr_register
00005978 g       *ABS*	00000000 _edata
00005c90 g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
000054e0 g     F .text	00000038 alt_ic_irq_disable
000047ec g     F .text	00000074 .hidden __modsi3
00006000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
0000400c g       .entry	00000000 _exit
00005940 g     O .rwdata	00000004 btn_edge_ptr
0000592c g     O .rwdata	00000004 hex4
00005b10 g     O .bss	00000004 __malloc_sbrk_start
00005718 g     F .text	00000004 alt_icache_flush_all
0000596c g     O .rwdata	00000004 alt_priority_mask
00005b14 g     O .bss	00000004 __malloc_free_list
000054a8 g     F .text	00000038 alt_ic_irq_enable
000041bc g     F .text	000000a8 num_to_seven_seg
00004f80 g     F .text	000002a8 __tzcalc_limits
00005598 g     F .text	000000e0 alt_load
00005230 g     F .text	0000000c __gettzinfo
00004cb8 g     F .text	00000014 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	8416e404 	addi	r16,r16,23440

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <alt_irq_handler+0x20>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a08617 	ldw	r2,-32232(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b64714 	ori	gp,gp,55580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	1096bd14 	ori	r2,r2,23284

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d72414 	ori	r3,r3,23696

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	00055980 	call	5598 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	00056780 	call	5678 <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <alt_after_alt_main>

000041bc <num_to_seven_seg>:
short state ; // Estado 0: normal, Estado 1: Set hora, Estado 2: Set Alarma, Estado diferente: Indefinido

char num_to_seven_seg(int num) {
	unsigned int result = 0;

	if (num == 0) { result = 0x7F - 0x40; }
    41bc:	20001426 	beq	r4,zero,4210 <num_to_seven_seg+0x54>
	else if (num == 1) { result = 0x7F - 0x79; }
    41c0:	00800044 	movi	r2,1
    41c4:	20801426 	beq	r4,r2,4218 <num_to_seven_seg+0x5c>
	else if (num == 2) { result = 0x7F - 0x24; }
    41c8:	00800084 	movi	r2,2
    41cc:	20801426 	beq	r4,r2,4220 <num_to_seven_seg+0x64>
	else if (num == 3) { result = 0x7F - 0x30; }
    41d0:	008000c4 	movi	r2,3
    41d4:	20801426 	beq	r4,r2,4228 <num_to_seven_seg+0x6c>
	else if (num == 4) { result = 0x7F - 0x19; }
    41d8:	00800104 	movi	r2,4
    41dc:	20801426 	beq	r4,r2,4230 <num_to_seven_seg+0x74>
	else if (num == 5) { result = 0x7F - 0x12; }
    41e0:	00800144 	movi	r2,5
    41e4:	20801426 	beq	r4,r2,4238 <num_to_seven_seg+0x7c>
	else if (num == 6) { result = 0x7F - 0x02; }
    41e8:	00800184 	movi	r2,6
    41ec:	20801426 	beq	r4,r2,4240 <num_to_seven_seg+0x84>
	else if (num == 7) { result = 0x7F - 0x78; }
    41f0:	008001c4 	movi	r2,7
    41f4:	20801426 	beq	r4,r2,4248 <num_to_seven_seg+0x8c>
	else if (num == 8) { result = 0x7F - 0x00; }
    41f8:	00800204 	movi	r2,8
    41fc:	20801426 	beq	r4,r2,4250 <num_to_seven_seg+0x94>
	else if (num == 9) { result = 0x7F - 0x10; }
    4200:	00800244 	movi	r2,9
    4204:	2080141e 	bne	r4,r2,4258 <num_to_seven_seg+0x9c>
    4208:	00801bc4 	movi	r2,111
    420c:	00001306 	br	425c <num_to_seven_seg+0xa0>
short state ; // Estado 0: normal, Estado 1: Set hora, Estado 2: Set Alarma, Estado diferente: Indefinido

char num_to_seven_seg(int num) {
	unsigned int result = 0;

	if (num == 0) { result = 0x7F - 0x40; }
    4210:	00800fc4 	movi	r2,63
    4214:	00001106 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 1) { result = 0x7F - 0x79; }
    4218:	00800184 	movi	r2,6
    421c:	00000f06 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 2) { result = 0x7F - 0x24; }
    4220:	008016c4 	movi	r2,91
    4224:	00000d06 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 3) { result = 0x7F - 0x30; }
    4228:	008013c4 	movi	r2,79
    422c:	00000b06 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 4) { result = 0x7F - 0x19; }
    4230:	00801984 	movi	r2,102
    4234:	00000906 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 5) { result = 0x7F - 0x12; }
    4238:	00801b44 	movi	r2,109
    423c:	00000706 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 6) { result = 0x7F - 0x02; }
    4240:	00801f44 	movi	r2,125
    4244:	00000506 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 7) { result = 0x7F - 0x78; }
    4248:	2005883a 	mov	r2,r4
    424c:	00000306 	br	425c <num_to_seven_seg+0xa0>
	else if (num == 8) { result = 0x7F - 0x00; }
    4250:	00801fc4 	movi	r2,127
    4254:	00000106 	br	425c <num_to_seven_seg+0xa0>
time_t new_time;

short state ; // Estado 0: normal, Estado 1: Set hora, Estado 2: Set Alarma, Estado diferente: Indefinido

char num_to_seven_seg(int num) {
	unsigned int result = 0;
    4258:	0005883a 	mov	r2,zero
	else if (num == 7) { result = 0x7F - 0x78; }
	else if (num == 8) { result = 0x7F - 0x00; }
	else if (num == 9) { result = 0x7F - 0x10; }

	return ~result;
}
    425c:	0084303a 	nor	r2,zero,r2
    4260:	f800283a 	ret

00004264 <show_time>:

void show_time (volatile char * dec, volatile char * unit, int n){
    4264:	defffc04 	addi	sp,sp,-16
    4268:	dc800215 	stw	r18,8(sp)
    426c:	dc400115 	stw	r17,4(sp)
    4270:	2025883a 	mov	r18,r4
    4274:	2823883a 	mov	r17,r5
	*dec = num_to_seven_seg(n / 10);
    4278:	3009883a 	mov	r4,r6
    427c:	01400284 	movi	r5,10
	else if (num == 9) { result = 0x7F - 0x10; }

	return ~result;
}

void show_time (volatile char * dec, volatile char * unit, int n){
    4280:	dfc00315 	stw	ra,12(sp)
    4284:	dc000015 	stw	r16,0(sp)
    4288:	3021883a 	mov	r16,r6
	*dec = num_to_seven_seg(n / 10);
    428c:	00047680 	call	4768 <__divsi3>
    4290:	1009883a 	mov	r4,r2
    4294:	00041bc0 	call	41bc <num_to_seven_seg>
	*unit = num_to_seven_seg(n % 10);
    4298:	01400284 	movi	r5,10
    429c:	8009883a 	mov	r4,r16

	return ~result;
}

void show_time (volatile char * dec, volatile char * unit, int n){
	*dec = num_to_seven_seg(n / 10);
    42a0:	90800005 	stb	r2,0(r18)
	*unit = num_to_seven_seg(n % 10);
    42a4:	00047ec0 	call	47ec <__modsi3>
    42a8:	1009883a 	mov	r4,r2
    42ac:	00041bc0 	call	41bc <num_to_seven_seg>
    42b0:	88800005 	stb	r2,0(r17)
}
    42b4:	dfc00317 	ldw	ra,12(sp)
    42b8:	dc800217 	ldw	r18,8(sp)
    42bc:	dc400117 	ldw	r17,4(sp)
    42c0:	dc000017 	ldw	r16,0(sp)
    42c4:	dec00404 	addi	sp,sp,16
    42c8:	f800283a 	ret

000042cc <timer_handler>:


static void timer_handler(void * context){
	*timer_status_ptr = 0;
    42cc:	d0a00f17 	ldw	r2,-32708(gp)
	*dec = num_to_seven_seg(n / 10);
	*unit = num_to_seven_seg(n % 10);
}


static void timer_handler(void * context){
    42d0:	defffe04 	addi	sp,sp,-8
    42d4:	dc000015 	stw	r16,0(sp)
    42d8:	dfc00115 	stw	ra,4(sp)
	*timer_status_ptr = 0;
    42dc:	10000005 	stb	zero,0(r2)
	now++;
    42e0:	d0a07717 	ldw	r2,-32292(gp)
    42e4:	04000034 	movhi	r16,0
    42e8:	8416ce04 	addi	r16,r16,23352
    42ec:	10800044 	addi	r2,r2,1
    42f0:	d0a07715 	stw	r2,-32292(gp)
	// alarm sound
	if (state == 0){
    42f4:	d0a07b0f 	ldh	r2,-32276(gp)
    42f8:	10001e1e 	bne	r2,zero,4374 <timer_handler+0xa8>
		ts = *localtime(&now);
    42fc:	d1207704 	addi	r4,gp,-32292
    4300:	000491c0 	call	491c <localtime>
    4304:	01800b04 	movi	r6,44
    4308:	100b883a 	mov	r5,r2
    430c:	8009883a 	mov	r4,r16
    4310:	0004ccc0 	call	4ccc <memcpy>
		alarm_ts = *localtime(&alarm);
    4314:	d1207604 	addi	r4,gp,-32296
    4318:	000491c0 	call	491c <localtime>
    431c:	00c00034 	movhi	r3,0
    4320:	18d6d904 	addi	r3,r3,23396
    4324:	1809883a 	mov	r4,r3
    4328:	01800b04 	movi	r6,44
    432c:	100b883a 	mov	r5,r2
    4330:	0004ccc0 	call	4ccc <memcpy>
		if (ts.tm_sec % 2 == 0 ){
    4334:	81000017 	ldw	r4,0(r16)
	*timer_status_ptr = 0;
	now++;
	// alarm sound
	if (state == 0){
		ts = *localtime(&now);
		alarm_ts = *localtime(&alarm);
    4338:	1007883a 	mov	r3,r2
    433c:	d0a00217 	ldw	r2,-32760(gp)
		if (ts.tm_sec % 2 == 0 ){
    4340:	2100004c 	andi	r4,r4,1
    4344:	2000091e 	bne	r4,zero,436c <timer_handler+0xa0>
			if (ts.tm_min == alarm_ts.tm_min && ts.tm_hour == alarm_ts.tm_hour){
    4348:	81400117 	ldw	r5,4(r16)
    434c:	19000117 	ldw	r4,4(r3)
    4350:	2900061e 	bne	r5,r4,436c <timer_handler+0xa0>
    4354:	81000217 	ldw	r4,8(r16)
    4358:	18c00217 	ldw	r3,8(r3)
    435c:	20c0031e 	bne	r4,r3,436c <timer_handler+0xa0>
				*leds = 0xFF;
    4360:	00ffffc4 	movi	r3,-1
    4364:	10c00005 	stb	r3,0(r2)
    4368:	00001606 	br	43c4 <timer_handler+0xf8>
			else{
				*leds = 0;
			}
		}
		else {
			*leds = 0;
    436c:	10000005 	stb	zero,0(r2)
    4370:	00001406 	br	43c4 <timer_handler+0xf8>
		}
	}
	//set new time
	else if (state == 1){
    4374:	00c00044 	movi	r3,1
    4378:	10c00a1e 	bne	r2,r3,43a4 <timer_handler+0xd8>
		ts = *localtime(&new_time);
    437c:	d1207c04 	addi	r4,gp,-32272
    4380:	000491c0 	call	491c <localtime>
    4384:	01800b04 	movi	r6,44
    4388:	100b883a 	mov	r5,r2
    438c:	8009883a 	mov	r4,r16
    4390:	0004ccc0 	call	4ccc <memcpy>
		new_time++;
    4394:	d0a07c17 	ldw	r2,-32272(gp)
    4398:	10800044 	addi	r2,r2,1
    439c:	d0a07c15 	stw	r2,-32272(gp)
    43a0:	00000806 	br	43c4 <timer_handler+0xf8>
	}
	// set alarm
	else if (state == 2){
    43a4:	00c00084 	movi	r3,2
    43a8:	10c0061e 	bne	r2,r3,43c4 <timer_handler+0xf8>
		ts = *localtime(&alarm);
    43ac:	d1207604 	addi	r4,gp,-32296
    43b0:	000491c0 	call	491c <localtime>
    43b4:	01800b04 	movi	r6,44
    43b8:	100b883a 	mov	r5,r2
    43bc:	8009883a 	mov	r4,r16
    43c0:	0004ccc0 	call	4ccc <memcpy>
	}
	alarm_ts = *localtime(&now);
    43c4:	d1207704 	addi	r4,gp,-32292
    43c8:	000491c0 	call	491c <localtime>
    43cc:	00c00034 	movhi	r3,0
    43d0:	18d6d904 	addi	r3,r3,23396
    43d4:	1809883a 	mov	r4,r3
    43d8:	100b883a 	mov	r5,r2
    43dc:	01800b04 	movi	r6,44
    43e0:	0004ccc0 	call	4ccc <memcpy>
    43e4:	1007883a 	mov	r3,r2
	if(state == 0 || (state ==1  && ts.tm_sec % 2 == 0) || (state == 2 && alarm_ts.tm_sec % 2 == 0)){
    43e8:	d0a07b0f 	ldh	r2,-32276(gp)
    43ec:	d1600817 	ldw	r5,-32736(gp)
    43f0:	d1200717 	ldw	r4,-32740(gp)
    43f4:	10000a26 	beq	r2,zero,4420 <timer_handler+0x154>
    43f8:	01800044 	movi	r6,1
    43fc:	1180031e 	bne	r2,r6,440c <timer_handler+0x140>
    4400:	80800017 	ldw	r2,0(r16)
    4404:	1184703a 	and	r2,r2,r6
    4408:	00000406 	br	441c <timer_handler+0x150>
    440c:	01800084 	movi	r6,2
    4410:	1180101e 	bne	r2,r6,4454 <timer_handler+0x188>
    4414:	18800017 	ldw	r2,0(r3)
    4418:	1080004c 	andi	r2,r2,1
    441c:	10000d1e 	bne	r2,zero,4454 <timer_handler+0x188>
		show_time(hex1, hex0, ts.tm_sec);
    4420:	81800017 	ldw	r6,0(r16)
    4424:	00042640 	call	4264 <show_time>
		show_time(hex3, hex2, ts.tm_min);
    4428:	81800117 	ldw	r6,4(r16)
    442c:	d1600617 	ldw	r5,-32744(gp)
    4430:	d1200517 	ldw	r4,-32748(gp)
    4434:	00042640 	call	4264 <show_time>
		show_time(hex5, hex4, ts.tm_hour);
    4438:	81800217 	ldw	r6,8(r16)
    443c:	d1600417 	ldw	r5,-32752(gp)
    4440:	d1200317 	ldw	r4,-32756(gp)
			break;
		default:
			break;
		}
	}
}
    4444:	dfc00117 	ldw	ra,4(sp)
    4448:	dc000017 	ldw	r16,0(sp)
    444c:	dec00204 	addi	sp,sp,8
	}
	alarm_ts = *localtime(&now);
	if(state == 0 || (state ==1  && ts.tm_sec % 2 == 0) || (state == 2 && alarm_ts.tm_sec % 2 == 0)){
		show_time(hex1, hex0, ts.tm_sec);
		show_time(hex3, hex2, ts.tm_min);
		show_time(hex5, hex4, ts.tm_hour);
    4450:	00042641 	jmpi	4264 <show_time>
	}
	else {
		show_time(hex1, hex0, ts.tm_sec);
    4454:	81800017 	ldw	r6,0(r16)
    4458:	00042640 	call	4264 <show_time>
		switch (pos){
    445c:	d0a0780f 	ldh	r2,-32288(gp)
    4460:	00c00044 	movi	r3,1
    4464:	10c00c26 	beq	r2,r3,4498 <timer_handler+0x1cc>
    4468:	18800416 	blt	r3,r2,447c <timer_handler+0x1b0>
    446c:	1000101e 	bne	r2,zero,44b0 <timer_handler+0x1e4>
		case 0:
			*hex2 = 0xFF;
    4470:	00ffffc4 	movi	r3,-1
    4474:	d0a00617 	ldw	r2,-32744(gp)
    4478:	00000c06 	br	44ac <timer_handler+0x1e0>
		show_time(hex3, hex2, ts.tm_min);
		show_time(hex5, hex4, ts.tm_hour);
	}
	else {
		show_time(hex1, hex0, ts.tm_sec);
		switch (pos){
    447c:	00c00084 	movi	r3,2
    4480:	10c00826 	beq	r2,r3,44a4 <timer_handler+0x1d8>
    4484:	00c000c4 	movi	r3,3
    4488:	10c0091e 	bne	r2,r3,44b0 <timer_handler+0x1e4>
			break;
		case 2:
			*hex4 = 0xFF;
			break;
		case 3:
			*hex5 = 0xFF;
    448c:	00ffffc4 	movi	r3,-1
    4490:	d0a00317 	ldw	r2,-32756(gp)
    4494:	00000506 	br	44ac <timer_handler+0x1e0>
		switch (pos){
		case 0:
			*hex2 = 0xFF;
			break;
		case 1:
			*hex3 = 0xFF;
    4498:	00ffffc4 	movi	r3,-1
    449c:	d0a00517 	ldw	r2,-32748(gp)
    44a0:	00000206 	br	44ac <timer_handler+0x1e0>
			break;
		case 2:
			*hex4 = 0xFF;
    44a4:	d0a00417 	ldw	r2,-32752(gp)
    44a8:	00ffffc4 	movi	r3,-1
			break;
		case 3:
			*hex5 = 0xFF;
    44ac:	10c00005 	stb	r3,0(r2)
			break;
		default:
			break;
		}
	}
}
    44b0:	dfc00117 	ldw	ra,4(sp)
    44b4:	dc000017 	ldw	r16,0(sp)
    44b8:	dec00204 	addi	sp,sp,8
    44bc:	f800283a 	ret

000044c0 <calc_time>:
	}
	btns_prev = *btns;
}

int calc_time(){
	switch (pos){
    44c0:	d0a0780f 	ldh	r2,-32288(gp)
    44c4:	00c00044 	movi	r3,1
    44c8:	10c00926 	beq	r2,r3,44f0 <calc_time+0x30>
    44cc:	18800216 	blt	r3,r2,44d8 <calc_time+0x18>
    44d0:	10000a26 	beq	r2,zero,44fc <calc_time+0x3c>
    44d4:	00000806 	br	44f8 <calc_time+0x38>
    44d8:	00c00084 	movi	r3,2
    44dc:	10c00926 	beq	r2,r3,4504 <calc_time+0x44>
    44e0:	00c000c4 	movi	r3,3
    44e4:	10c0041e 	bne	r2,r3,44f8 <calc_time+0x38>
			break;
		case 2:
			return 3600;
			break;
		case 3:
			return 36000;
    44e8:	00a32814 	movui	r2,36000
    44ec:	f800283a 	ret
	switch (pos){
		case 0:
			 return 60;
			break;
		case 1:
			return 600;
    44f0:	00809604 	movi	r2,600
    44f4:	f800283a 	ret
			return 36000;
			break;
		default:
			break;
		}
}
    44f8:	f800283a 	ret
}

int calc_time(){
	switch (pos){
		case 0:
			 return 60;
    44fc:	00800f04 	movi	r2,60
    4500:	f800283a 	ret
			break;
		case 1:
			return 600;
			break;
		case 2:
			return 3600;
    4504:	00838404 	movi	r2,3600
			return 36000;
			break;
		default:
			break;
		}
}
    4508:	f800283a 	ret

0000450c <btns_handler>:
	}
}

static void btns_handler(void * context){
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BTNS_BASE + 12);
    450c:	00821f04 	movi	r2,2172
    4510:	10800017 	ldw	r2,0(r2)
			break;
		}
	}
}

static void btns_handler(void * context){
    4514:	defffd04 	addi	sp,sp,-12
    4518:	dc000015 	stw	r16,0(sp)
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BTNS_BASE + 12);
    451c:	20800015 	stw	r2,0(r4)
	*btn_mask_ptr = 0xf;
    4520:	d0a00a17 	ldw	r2,-32728(gp)
			break;
		}
	}
}

static void btns_handler(void * context){
    4524:	dfc00215 	stw	ra,8(sp)
    4528:	dc400115 	stw	r17,4(sp)
	volatile int * edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr = *(volatile int *)(BTNS_BASE + 12);
	*btn_mask_ptr = 0xf;
    452c:	00c003c4 	movi	r3,15
    4530:	10c00005 	stb	r3,0(r2)
	*btn_edge_ptr = *edge_capture_ptr;
    4534:	20c00017 	ldw	r3,0(r4)
    4538:	d0a00917 	ldw	r2,-32732(gp)
    453c:	10c00005 	stb	r3,0(r2)
	switch(*btns){
    4540:	d4200117 	ldw	r16,-32764(gp)
    4544:	00c00204 	movi	r3,8
    4548:	80800003 	ldbu	r2,0(r16)
    454c:	10803fcc 	andi	r2,r2,255
    4550:	18805a36 	bltu	r3,r2,46bc <btns_handler+0x1b0>
    4554:	100490ba 	slli	r2,r2,2
    4558:	00c00034 	movhi	r3,0
    455c:	18d15b04 	addi	r3,r3,17772
    4560:	10c5883a 	add	r2,r2,r3
    4564:	10800017 	ldw	r2,0(r2)
    4568:	1000683a 	jmp	r2
    456c:	000046c0 	call	46c <__alt_mem_onchip_memory2_0-0x3b94>
    4570:	00004660 	cmpeqi	zero,zero,281
    4574:	00004614 	movui	zero,280
    4578:	000046bc 	xorhi	zero,zero,282
    457c:	000045dc 	xori	zero,zero,279
    4580:	000046bc 	xorhi	zero,zero,282
    4584:	000046bc 	xorhi	zero,zero,282
    4588:	000046bc 	xorhi	zero,zero,282
    458c:	00004590 	cmplti	zero,zero,278
	case 8:       // set time
		if(btns_prev != *btns)
    4590:	80800003 	ldbu	r2,0(r16)
    4594:	d0e00007 	ldb	r3,-32768(gp)
    4598:	10803fcc 	andi	r2,r2,255
    459c:	1080201c 	xori	r2,r2,128
    45a0:	10bfe004 	addi	r2,r2,-128
    45a4:	10c04626 	beq	r2,r3,46c0 <btns_handler+0x1b4>
			if (state == 0){    // estado show time
    45a8:	d0a07b0f 	ldh	r2,-32276(gp)
    45ac:	1000041e 	bne	r2,zero,45c0 <btns_handler+0xb4>
				state = 1;
    45b0:	00800044 	movi	r2,1
    45b4:	d0a07b0d 	sth	r2,-32276(gp)
				new_time = now;
    45b8:	d0a07717 	ldw	r2,-32292(gp)
    45bc:	00003506 	br	4694 <btns_handler+0x188>
			}
			else if (state == 1){    // estado set time
    45c0:	00c00044 	movi	r3,1
    45c4:	10c03d1e 	bne	r2,r3,46bc <btns_handler+0x1b0>
				state = 2;
    45c8:	00800084 	movi	r2,2
    45cc:	d0a07b0d 	sth	r2,-32276(gp)
				now = new_time;
    45d0:	d0a07c17 	ldw	r2,-32272(gp)
    45d4:	d0a07715 	stw	r2,-32292(gp)
    45d8:	00003906 	br	46c0 <btns_handler+0x1b4>
				state = 0;
			}
			else state = 0;
		break;
	case 4:      // move to right
		if(btns_prev != *btns) pos += 1;
    45dc:	80800003 	ldbu	r2,0(r16)
    45e0:	d0e00007 	ldb	r3,-32768(gp)
    45e4:	10803fcc 	andi	r2,r2,255
    45e8:	1080201c 	xori	r2,r2,128
    45ec:	10bfe004 	addi	r2,r2,-128
    45f0:	10c00326 	beq	r2,r3,4600 <btns_handler+0xf4>
    45f4:	d0a0780b 	ldhu	r2,-32288(gp)
    45f8:	10800044 	addi	r2,r2,1
    45fc:	d0a0780d 	sth	r2,-32288(gp)
		if (pos > 3) pos = 0;
    4600:	d0a0780f 	ldh	r2,-32288(gp)
    4604:	00c000c4 	movi	r3,3
    4608:	18802d0e 	bge	r3,r2,46c0 <btns_handler+0x1b4>
    460c:	d020780d 	sth	zero,-32288(gp)
    4610:	00002b06 	br	46c0 <btns_handler+0x1b4>
		break;
	case 2:      // up
		if(btns_prev != *btns){
    4614:	80800003 	ldbu	r2,0(r16)
    4618:	d0e00007 	ldb	r3,-32768(gp)
    461c:	10803fcc 	andi	r2,r2,255
    4620:	1080201c 	xori	r2,r2,128
    4624:	10bfe004 	addi	r2,r2,-128
    4628:	10c02526 	beq	r2,r3,46c0 <btns_handler+0x1b4>
			if (state == 1) new_time += calc_time();
    462c:	d0a07b0f 	ldh	r2,-32276(gp)
    4630:	00c00044 	movi	r3,1
    4634:	10c0041e 	bne	r2,r3,4648 <btns_handler+0x13c>
    4638:	00044c00 	call	44c0 <calc_time>
    463c:	d0e07c17 	ldw	r3,-32272(gp)
    4640:	1885883a 	add	r2,r3,r2
    4644:	00001306 	br	4694 <btns_handler+0x188>
			else if (state == 2) alarm += calc_time();
    4648:	00c00084 	movi	r3,2
    464c:	10c01c1e 	bne	r2,r3,46c0 <btns_handler+0x1b4>
    4650:	00044c00 	call	44c0 <calc_time>
    4654:	d0e07617 	ldw	r3,-32296(gp)
    4658:	1885883a 	add	r2,r3,r2
    465c:	00001506 	br	46b4 <btns_handler+0x1a8>
		}
		break;
	case 1:     // down
		if(btns_prev != *btns)
    4660:	80800003 	ldbu	r2,0(r16)
    4664:	d0e00007 	ldb	r3,-32768(gp)
    4668:	10803fcc 	andi	r2,r2,255
    466c:	1080201c 	xori	r2,r2,128
    4670:	10bfe004 	addi	r2,r2,-128
    4674:	10c01226 	beq	r2,r3,46c0 <btns_handler+0x1b4>
		if (state == 1) {if(new_time != 0) (new_time -= calc_time());}
    4678:	d0a07b0f 	ldh	r2,-32276(gp)
    467c:	00c00044 	movi	r3,1
    4680:	10c0061e 	bne	r2,r3,469c <btns_handler+0x190>
    4684:	d4607c17 	ldw	r17,-32272(gp)
    4688:	88000d26 	beq	r17,zero,46c0 <btns_handler+0x1b4>
    468c:	00044c00 	call	44c0 <calc_time>
    4690:	8885c83a 	sub	r2,r17,r2
    4694:	d0a07c15 	stw	r2,-32272(gp)
    4698:	00000906 	br	46c0 <btns_handler+0x1b4>
		else if (state == 2) {if(alarm != 0) (alarm -= calc_time());}
    469c:	00c00084 	movi	r3,2
    46a0:	10c0071e 	bne	r2,r3,46c0 <btns_handler+0x1b4>
    46a4:	d4607617 	ldw	r17,-32296(gp)
    46a8:	88000526 	beq	r17,zero,46c0 <btns_handler+0x1b4>
    46ac:	00044c00 	call	44c0 <calc_time>
    46b0:	8885c83a 	sub	r2,r17,r2
    46b4:	d0a07615 	stw	r2,-32296(gp)
    46b8:	00000106 	br	46c0 <btns_handler+0x1b4>
		break;
	case 0: break;
	default:
		state = 0;
    46bc:	d0207b0d 	sth	zero,-32276(gp)
		break;
	}
	btns_prev = *btns;
    46c0:	80800003 	ldbu	r2,0(r16)
    46c4:	d0a00005 	stb	r2,-32768(gp)
}
    46c8:	dfc00217 	ldw	ra,8(sp)
    46cc:	dc400117 	ldw	r17,4(sp)
    46d0:	dc000017 	ldw	r16,0(sp)
    46d4:	dec00304 	addi	sp,sp,12
    46d8:	f800283a 	ret

000046dc <main>:
			edge_capture_ptr, 0);
}

static void init_timer (){
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
    46dc:	d0a00d17 	ldw	r2,-32716(gp)
	*timer_control_ptr = 7;
	*timer_status_ptr = 0;
}

int main()
{ 
    46e0:	defffd04 	addi	sp,sp,-12
    46e4:	dc000115 	stw	r16,4(sp)
    46e8:	dfc00215 	stw	ra,8(sp)
			edge_capture_ptr, 0);
}

static void init_timer (){
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
    46ec:	00c00044 	movi	r3,1
    46f0:	10c00005 	stb	r3,0(r2)
	*timer_edge_cap_ptr = 0xF;
    46f4:	d0a00c17 	ldw	r2,-32720(gp)
    46f8:	040003c4 	movi	r16,15
	alt_ic_isr_register (TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    46fc:	01800034 	movhi	r6,0
}

static void init_timer (){
	void * edge_capture_ptr = (void*) &edge_capture_time;
	*timer_mask_ptr = 1;
	*timer_edge_cap_ptr = 0xF;
    4700:	14000005 	stb	r16,0(r2)
	alt_ic_isr_register (TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    4704:	d1e07a04 	addi	r7,gp,-32280
    4708:	3190b304 	addi	r6,r6,17100
    470c:	01400044 	movi	r5,1
    4710:	0009883a 	mov	r4,zero
    4714:	d8000015 	stw	zero,0(sp)
    4718:	00054a40 	call	54a4 <alt_ic_isr_register>
			TIMER_0_IRQ,
			timer_handler,
			edge_capture_ptr,
			0);
	*timer_control_ptr = 7;
    471c:	d0a00e17 	ldw	r2,-32712(gp)
    4720:	00c001c4 	movi	r3,7
{
	void * edge_capture_ptr = (void*) &edge_capture;
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;
	alt_ic_isr_register( BTNS_IRQ_INTERRUPT_CONTROLLER_ID,
    4724:	01800034 	movhi	r6,0
	alt_ic_isr_register (TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
			TIMER_0_IRQ,
			timer_handler,
			edge_capture_ptr,
			0);
	*timer_control_ptr = 7;
    4728:	10c00005 	stb	r3,0(r2)
	*timer_status_ptr = 0;
    472c:	d0a00f17 	ldw	r2,-32708(gp)
{
	void * edge_capture_ptr = (void*) &edge_capture;
	*btn_mask_ptr = 0xF;
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;
	alt_ic_isr_register( BTNS_IRQ_INTERRUPT_CONTROLLER_ID,
    4730:	d1e07904 	addi	r7,gp,-32284
    4734:	31914304 	addi	r6,r6,17676
			TIMER_0_IRQ,
			timer_handler,
			edge_capture_ptr,
			0);
	*timer_control_ptr = 7;
	*timer_status_ptr = 0;
    4738:	10000005 	stb	zero,0(r2)
}

static void init_btns(void)
{
	void * edge_capture_ptr = (void*) &edge_capture;
	*btn_mask_ptr = 0xF;
    473c:	d0a00a17 	ldw	r2,-32728(gp)
	*btn_edge_ptr = 0xF;
	*btn_direction_ptr = 0;
	alt_ic_isr_register( BTNS_IRQ_INTERRUPT_CONTROLLER_ID,
    4740:	01400084 	movi	r5,2
    4744:	0009883a 	mov	r4,zero
}

static void init_btns(void)
{
	void * edge_capture_ptr = (void*) &edge_capture;
	*btn_mask_ptr = 0xF;
    4748:	14000005 	stb	r16,0(r2)
	*btn_edge_ptr = 0xF;
    474c:	d0a00917 	ldw	r2,-32732(gp)
    4750:	14000005 	stb	r16,0(r2)
	*btn_direction_ptr = 0;
    4754:	d0a00b17 	ldw	r2,-32724(gp)
    4758:	10000005 	stb	zero,0(r2)
	alt_ic_isr_register( BTNS_IRQ_INTERRUPT_CONTROLLER_ID,
    475c:	d8000015 	stw	zero,0(sp)
    4760:	00054a40 	call	54a4 <alt_ic_isr_register>
    4764:	003fff06 	br	4764 <main+0x88>

00004768 <__divsi3>:
    4768:	20001b16 	blt	r4,zero,47d8 <__divsi3+0x70>
    476c:	000f883a 	mov	r7,zero
    4770:	28001616 	blt	r5,zero,47cc <__divsi3+0x64>
    4774:	200d883a 	mov	r6,r4
    4778:	29001a2e 	bgeu	r5,r4,47e4 <__divsi3+0x7c>
    477c:	00800804 	movi	r2,32
    4780:	00c00044 	movi	r3,1
    4784:	00000106 	br	478c <__divsi3+0x24>
    4788:	10000d26 	beq	r2,zero,47c0 <__divsi3+0x58>
    478c:	294b883a 	add	r5,r5,r5
    4790:	10bfffc4 	addi	r2,r2,-1
    4794:	18c7883a 	add	r3,r3,r3
    4798:	293ffb36 	bltu	r5,r4,4788 <__divsi3+0x20>
    479c:	0005883a 	mov	r2,zero
    47a0:	18000726 	beq	r3,zero,47c0 <__divsi3+0x58>
    47a4:	0005883a 	mov	r2,zero
    47a8:	31400236 	bltu	r6,r5,47b4 <__divsi3+0x4c>
    47ac:	314dc83a 	sub	r6,r6,r5
    47b0:	10c4b03a 	or	r2,r2,r3
    47b4:	1806d07a 	srli	r3,r3,1
    47b8:	280ad07a 	srli	r5,r5,1
    47bc:	183ffa1e 	bne	r3,zero,47a8 <__divsi3+0x40>
    47c0:	38000126 	beq	r7,zero,47c8 <__divsi3+0x60>
    47c4:	0085c83a 	sub	r2,zero,r2
    47c8:	f800283a 	ret
    47cc:	014bc83a 	sub	r5,zero,r5
    47d0:	39c0005c 	xori	r7,r7,1
    47d4:	003fe706 	br	4774 <__divsi3+0xc>
    47d8:	0109c83a 	sub	r4,zero,r4
    47dc:	01c00044 	movi	r7,1
    47e0:	003fe306 	br	4770 <__divsi3+0x8>
    47e4:	00c00044 	movi	r3,1
    47e8:	003fee06 	br	47a4 <__divsi3+0x3c>

000047ec <__modsi3>:
    47ec:	20001716 	blt	r4,zero,484c <__modsi3+0x60>
    47f0:	000f883a 	mov	r7,zero
    47f4:	2005883a 	mov	r2,r4
    47f8:	28001216 	blt	r5,zero,4844 <__modsi3+0x58>
    47fc:	2900162e 	bgeu	r5,r4,4858 <__modsi3+0x6c>
    4800:	01800804 	movi	r6,32
    4804:	00c00044 	movi	r3,1
    4808:	00000106 	br	4810 <__modsi3+0x24>
    480c:	30000a26 	beq	r6,zero,4838 <__modsi3+0x4c>
    4810:	294b883a 	add	r5,r5,r5
    4814:	31bfffc4 	addi	r6,r6,-1
    4818:	18c7883a 	add	r3,r3,r3
    481c:	293ffb36 	bltu	r5,r4,480c <__modsi3+0x20>
    4820:	18000526 	beq	r3,zero,4838 <__modsi3+0x4c>
    4824:	1806d07a 	srli	r3,r3,1
    4828:	11400136 	bltu	r2,r5,4830 <__modsi3+0x44>
    482c:	1145c83a 	sub	r2,r2,r5
    4830:	280ad07a 	srli	r5,r5,1
    4834:	183ffb1e 	bne	r3,zero,4824 <__modsi3+0x38>
    4838:	38000126 	beq	r7,zero,4840 <__modsi3+0x54>
    483c:	0085c83a 	sub	r2,zero,r2
    4840:	f800283a 	ret
    4844:	014bc83a 	sub	r5,zero,r5
    4848:	003fec06 	br	47fc <__modsi3+0x10>
    484c:	0109c83a 	sub	r4,zero,r4
    4850:	01c00044 	movi	r7,1
    4854:	003fe706 	br	47f4 <__modsi3+0x8>
    4858:	00c00044 	movi	r3,1
    485c:	003ff106 	br	4824 <__modsi3+0x38>

00004860 <__udivsi3>:
    4860:	200d883a 	mov	r6,r4
    4864:	2900152e 	bgeu	r5,r4,48bc <__udivsi3+0x5c>
    4868:	28001416 	blt	r5,zero,48bc <__udivsi3+0x5c>
    486c:	00800804 	movi	r2,32
    4870:	00c00044 	movi	r3,1
    4874:	00000206 	br	4880 <__udivsi3+0x20>
    4878:	10000e26 	beq	r2,zero,48b4 <__udivsi3+0x54>
    487c:	28000516 	blt	r5,zero,4894 <__udivsi3+0x34>
    4880:	294b883a 	add	r5,r5,r5
    4884:	10bfffc4 	addi	r2,r2,-1
    4888:	18c7883a 	add	r3,r3,r3
    488c:	293ffa36 	bltu	r5,r4,4878 <__udivsi3+0x18>
    4890:	18000826 	beq	r3,zero,48b4 <__udivsi3+0x54>
    4894:	0005883a 	mov	r2,zero
    4898:	31400236 	bltu	r6,r5,48a4 <__udivsi3+0x44>
    489c:	314dc83a 	sub	r6,r6,r5
    48a0:	10c4b03a 	or	r2,r2,r3
    48a4:	1806d07a 	srli	r3,r3,1
    48a8:	280ad07a 	srli	r5,r5,1
    48ac:	183ffa1e 	bne	r3,zero,4898 <__udivsi3+0x38>
    48b0:	f800283a 	ret
    48b4:	0005883a 	mov	r2,zero
    48b8:	f800283a 	ret
    48bc:	00c00044 	movi	r3,1
    48c0:	003ff406 	br	4894 <__udivsi3+0x34>

000048c4 <__umodsi3>:
    48c4:	2005883a 	mov	r2,r4
    48c8:	2900122e 	bgeu	r5,r4,4914 <__umodsi3+0x50>
    48cc:	28001116 	blt	r5,zero,4914 <__umodsi3+0x50>
    48d0:	01800804 	movi	r6,32
    48d4:	00c00044 	movi	r3,1
    48d8:	00000206 	br	48e4 <__umodsi3+0x20>
    48dc:	30000c26 	beq	r6,zero,4910 <__umodsi3+0x4c>
    48e0:	28000516 	blt	r5,zero,48f8 <__umodsi3+0x34>
    48e4:	294b883a 	add	r5,r5,r5
    48e8:	31bfffc4 	addi	r6,r6,-1
    48ec:	18c7883a 	add	r3,r3,r3
    48f0:	293ffa36 	bltu	r5,r4,48dc <__umodsi3+0x18>
    48f4:	18000626 	beq	r3,zero,4910 <__umodsi3+0x4c>
    48f8:	1806d07a 	srli	r3,r3,1
    48fc:	11400136 	bltu	r2,r5,4904 <__umodsi3+0x40>
    4900:	1145c83a 	sub	r2,r2,r5
    4904:	280ad07a 	srli	r5,r5,1
    4908:	183ffb1e 	bne	r3,zero,48f8 <__umodsi3+0x34>
    490c:	f800283a 	ret
    4910:	f800283a 	ret
    4914:	00c00044 	movi	r3,1
    4918:	003ff706 	br	48f8 <__umodsi3+0x34>

0000491c <localtime>:
    491c:	00800034 	movhi	r2,0
    4920:	defffd04 	addi	sp,sp,-12
    4924:	10965a04 	addi	r2,r2,22888
    4928:	dc000015 	stw	r16,0(sp)
    492c:	14000017 	ldw	r16,0(r2)
    4930:	dc400115 	stw	r17,4(sp)
    4934:	dfc00215 	stw	ra,8(sp)
    4938:	80800917 	ldw	r2,36(r16)
    493c:	2023883a 	mov	r17,r4
    4940:	1000031e 	bne	r2,zero,4950 <localtime+0x34>
    4944:	01000904 	movi	r4,36
    4948:	0004ca40 	call	4ca4 <malloc>
    494c:	80800915 	stw	r2,36(r16)
    4950:	81400917 	ldw	r5,36(r16)
    4954:	8809883a 	mov	r4,r17
    4958:	dfc00217 	ldw	ra,8(sp)
    495c:	dc400117 	ldw	r17,4(sp)
    4960:	dc000017 	ldw	r16,0(sp)
    4964:	dec00304 	addi	sp,sp,12
    4968:	000496c1 	jmpi	496c <localtime_r>

0000496c <localtime_r>:
    496c:	defff904 	addi	sp,sp,-28
    4970:	dfc00615 	stw	ra,24(sp)
    4974:	dd000515 	stw	r20,20(sp)
    4978:	dcc00415 	stw	r19,16(sp)
    497c:	dc400215 	stw	r17,8(sp)
    4980:	dc000115 	stw	r16,4(sp)
    4984:	2029883a 	mov	r20,r4
    4988:	d9400015 	stw	r5,0(sp)
    498c:	dc800315 	stw	r18,12(sp)
    4990:	00052300 	call	5230 <__gettzinfo>
    4994:	d9400017 	ldw	r5,0(sp)
    4998:	a009883a 	mov	r4,r20
    499c:	1023883a 	mov	r17,r2
    49a0:	000523c0 	call	523c <gmtime_r>
    49a4:	14c00517 	ldw	r19,20(r2)
    49a8:	1021883a 	mov	r16,r2
    49ac:	9cc1db04 	addi	r19,r19,1900
    49b0:	988000cc 	andi	r2,r19,3
    49b4:	1000041e 	bne	r2,zero,49c8 <localtime_r+0x5c>
    49b8:	01401904 	movi	r5,100
    49bc:	9809883a 	mov	r4,r19
    49c0:	00047ec0 	call	47ec <__modsi3>
    49c4:	1000051e 	bne	r2,zero,49dc <localtime_r+0x70>
    49c8:	9809883a 	mov	r4,r19
    49cc:	01406404 	movi	r5,400
    49d0:	00047ec0 	call	47ec <__modsi3>
    49d4:	1009003a 	cmpeq	r4,r2,zero
    49d8:	00000106 	br	49e0 <localtime_r+0x74>
    49dc:	01000044 	movi	r4,1
    49e0:	01400c04 	movi	r5,48
    49e4:	04800034 	movhi	r18,0
    49e8:	000547c0 	call	547c <__mulsi3>
    49ec:	9495e604 	addi	r18,r18,22424
    49f0:	90a5883a 	add	r18,r18,r2
    49f4:	00052280 	call	5228 <__tz_lock>
    49f8:	00800034 	movhi	r2,0
    49fc:	1096c704 	addi	r2,r2,23324
    4a00:	10800017 	ldw	r2,0(r2)
    4a04:	10001726 	beq	r2,zero,4a64 <localtime_r+0xf8>
    4a08:	88800117 	ldw	r2,4(r17)
    4a0c:	9880051e 	bne	r19,r2,4a24 <localtime_r+0xb8>
    4a10:	89000017 	ldw	r4,0(r17)
    4a14:	a0800017 	ldw	r2,0(r20)
    4a18:	88c00717 	ldw	r3,28(r17)
    4a1c:	2000061e 	bne	r4,zero,4a38 <localtime_r+0xcc>
    4a20:	00000706 	br	4a40 <localtime_r+0xd4>
    4a24:	9809883a 	mov	r4,r19
    4a28:	0004f800 	call	4f80 <__tzcalc_limits>
    4a2c:	103ff81e 	bne	r2,zero,4a10 <localtime_r+0xa4>
    4a30:	00bfffc4 	movi	r2,-1
    4a34:	00000906 	br	4a5c <localtime_r+0xf0>
    4a38:	10c00516 	blt	r2,r3,4a50 <localtime_r+0xe4>
    4a3c:	00000106 	br	4a44 <localtime_r+0xd8>
    4a40:	10c0050e 	bge	r2,r3,4a58 <localtime_r+0xec>
    4a44:	88c00e17 	ldw	r3,56(r17)
    4a48:	10c4803a 	cmplt	r2,r2,r3
    4a4c:	00000306 	br	4a5c <localtime_r+0xf0>
    4a50:	0005883a 	mov	r2,zero
    4a54:	00000106 	br	4a5c <localtime_r+0xf0>
    4a58:	00800044 	movi	r2,1
    4a5c:	80800815 	stw	r2,32(r16)
    4a60:	00000106 	br	4a68 <localtime_r+0xfc>
    4a64:	80000815 	stw	zero,32(r16)
    4a68:	80c00817 	ldw	r3,32(r16)
    4a6c:	00800044 	movi	r2,1
    4a70:	1880021e 	bne	r3,r2,4a7c <localtime_r+0x110>
    4a74:	8d000f17 	ldw	r20,60(r17)
    4a78:	00000106 	br	4a80 <localtime_r+0x114>
    4a7c:	8d000817 	ldw	r20,32(r17)
    4a80:	01438404 	movi	r5,3600
    4a84:	a009883a 	mov	r4,r20
    4a88:	00047ec0 	call	47ec <__modsi3>
    4a8c:	01400f04 	movi	r5,60
    4a90:	1009883a 	mov	r4,r2
    4a94:	1027883a 	mov	r19,r2
    4a98:	00047ec0 	call	47ec <__modsi3>
    4a9c:	84400017 	ldw	r17,0(r16)
    4aa0:	9809883a 	mov	r4,r19
    4aa4:	01400f04 	movi	r5,60
    4aa8:	88a3c83a 	sub	r17,r17,r2
    4aac:	84400015 	stw	r17,0(r16)
    4ab0:	00047680 	call	4768 <__divsi3>
    4ab4:	84c00117 	ldw	r19,4(r16)
    4ab8:	a009883a 	mov	r4,r20
    4abc:	01438404 	movi	r5,3600
    4ac0:	98a7c83a 	sub	r19,r19,r2
    4ac4:	84c00115 	stw	r19,4(r16)
    4ac8:	00047680 	call	4768 <__divsi3>
    4acc:	80c00217 	ldw	r3,8(r16)
    4ad0:	01000ec4 	movi	r4,59
    4ad4:	1885c83a 	sub	r2,r3,r2
    4ad8:	80800215 	stw	r2,8(r16)
    4adc:	2440040e 	bge	r4,r17,4af0 <localtime_r+0x184>
    4ae0:	9cc00044 	addi	r19,r19,1
    4ae4:	84c00115 	stw	r19,4(r16)
    4ae8:	8c7ff104 	addi	r17,r17,-60
    4aec:	00000406 	br	4b00 <localtime_r+0x194>
    4af0:	8800040e 	bge	r17,zero,4b04 <localtime_r+0x198>
    4af4:	9cffffc4 	addi	r19,r19,-1
    4af8:	84c00115 	stw	r19,4(r16)
    4afc:	8c400f04 	addi	r17,r17,60
    4b00:	84400015 	stw	r17,0(r16)
    4b04:	80c00117 	ldw	r3,4(r16)
    4b08:	20c0040e 	bge	r4,r3,4b1c <localtime_r+0x1b0>
    4b0c:	10800044 	addi	r2,r2,1
    4b10:	80800215 	stw	r2,8(r16)
    4b14:	18fff104 	addi	r3,r3,-60
    4b18:	00000406 	br	4b2c <localtime_r+0x1c0>
    4b1c:	1800040e 	bge	r3,zero,4b30 <localtime_r+0x1c4>
    4b20:	10bfffc4 	addi	r2,r2,-1
    4b24:	80800215 	stw	r2,8(r16)
    4b28:	18c00f04 	addi	r3,r3,60
    4b2c:	80c00115 	stw	r3,4(r16)
    4b30:	80800217 	ldw	r2,8(r16)
    4b34:	00c005c4 	movi	r3,23
    4b38:	1880220e 	bge	r3,r2,4bc4 <localtime_r+0x258>
    4b3c:	80c00717 	ldw	r3,28(r16)
    4b40:	01000184 	movi	r4,6
    4b44:	18c00044 	addi	r3,r3,1
    4b48:	80c00715 	stw	r3,28(r16)
    4b4c:	80c00617 	ldw	r3,24(r16)
    4b50:	18c00044 	addi	r3,r3,1
    4b54:	20c00216 	blt	r4,r3,4b60 <localtime_r+0x1f4>
    4b58:	80c00615 	stw	r3,24(r16)
    4b5c:	00000106 	br	4b64 <localtime_r+0x1f8>
    4b60:	80000615 	stw	zero,24(r16)
    4b64:	81000417 	ldw	r4,16(r16)
    4b68:	80c00317 	ldw	r3,12(r16)
    4b6c:	10bffa04 	addi	r2,r2,-24
    4b70:	80800215 	stw	r2,8(r16)
    4b74:	2105883a 	add	r2,r4,r4
    4b78:	18c00044 	addi	r3,r3,1
    4b7c:	1085883a 	add	r2,r2,r2
    4b80:	80c00315 	stw	r3,12(r16)
    4b84:	9085883a 	add	r2,r18,r2
    4b88:	10800017 	ldw	r2,0(r2)
    4b8c:	10c03b0e 	bge	r2,r3,4c7c <localtime_r+0x310>
    4b90:	1887c83a 	sub	r3,r3,r2
    4b94:	80c00315 	stw	r3,12(r16)
    4b98:	21000044 	addi	r4,r4,1
    4b9c:	00800304 	movi	r2,12
    4ba0:	20800226 	beq	r4,r2,4bac <localtime_r+0x240>
    4ba4:	81000415 	stw	r4,16(r16)
    4ba8:	00003406 	br	4c7c <localtime_r+0x310>
    4bac:	80800517 	ldw	r2,20(r16)
    4bb0:	80000415 	stw	zero,16(r16)
    4bb4:	80000715 	stw	zero,28(r16)
    4bb8:	10800044 	addi	r2,r2,1
    4bbc:	80800515 	stw	r2,20(r16)
    4bc0:	00002e06 	br	4c7c <localtime_r+0x310>
    4bc4:	10002d0e 	bge	r2,zero,4c7c <localtime_r+0x310>
    4bc8:	80c00717 	ldw	r3,28(r16)
    4bcc:	18ffffc4 	addi	r3,r3,-1
    4bd0:	80c00715 	stw	r3,28(r16)
    4bd4:	80c00617 	ldw	r3,24(r16)
    4bd8:	18ffffc4 	addi	r3,r3,-1
    4bdc:	1800010e 	bge	r3,zero,4be4 <localtime_r+0x278>
    4be0:	00c00184 	movi	r3,6
    4be4:	80c00615 	stw	r3,24(r16)
    4be8:	80c00317 	ldw	r3,12(r16)
    4bec:	10800604 	addi	r2,r2,24
    4bf0:	80800215 	stw	r2,8(r16)
    4bf4:	18ffffc4 	addi	r3,r3,-1
    4bf8:	80c00315 	stw	r3,12(r16)
    4bfc:	18001f1e 	bne	r3,zero,4c7c <localtime_r+0x310>
    4c00:	80800417 	ldw	r2,16(r16)
    4c04:	10bfffc4 	addi	r2,r2,-1
    4c08:	10000216 	blt	r2,zero,4c14 <localtime_r+0x2a8>
    4c0c:	80800415 	stw	r2,16(r16)
    4c10:	00001406 	br	4c64 <localtime_r+0x2f8>
    4c14:	84400517 	ldw	r17,20(r16)
    4c18:	008002c4 	movi	r2,11
    4c1c:	80800415 	stw	r2,16(r16)
    4c20:	88bfffc4 	addi	r2,r17,-1
    4c24:	80800515 	stw	r2,20(r16)
    4c28:	108000cc 	andi	r2,r2,3
    4c2c:	8c41dac4 	addi	r17,r17,1899
    4c30:	1000041e 	bne	r2,zero,4c44 <localtime_r+0x2d8>
    4c34:	01401904 	movi	r5,100
    4c38:	8809883a 	mov	r4,r17
    4c3c:	00047ec0 	call	47ec <__modsi3>
    4c40:	1000051e 	bne	r2,zero,4c58 <localtime_r+0x2ec>
    4c44:	01406404 	movi	r5,400
    4c48:	8809883a 	mov	r4,r17
    4c4c:	00047ec0 	call	47ec <__modsi3>
    4c50:	1005003a 	cmpeq	r2,r2,zero
    4c54:	00000106 	br	4c5c <localtime_r+0x2f0>
    4c58:	00800044 	movi	r2,1
    4c5c:	10805b04 	addi	r2,r2,364
    4c60:	80800715 	stw	r2,28(r16)
    4c64:	80800417 	ldw	r2,16(r16)
    4c68:	1085883a 	add	r2,r2,r2
    4c6c:	1085883a 	add	r2,r2,r2
    4c70:	9085883a 	add	r2,r18,r2
    4c74:	10800017 	ldw	r2,0(r2)
    4c78:	80800315 	stw	r2,12(r16)
    4c7c:	000522c0 	call	522c <__tz_unlock>
    4c80:	8005883a 	mov	r2,r16
    4c84:	dfc00617 	ldw	ra,24(sp)
    4c88:	dd000517 	ldw	r20,20(sp)
    4c8c:	dcc00417 	ldw	r19,16(sp)
    4c90:	dc800317 	ldw	r18,12(sp)
    4c94:	dc400217 	ldw	r17,8(sp)
    4c98:	dc000117 	ldw	r16,4(sp)
    4c9c:	dec00704 	addi	sp,sp,28
    4ca0:	f800283a 	ret

00004ca4 <malloc>:
    4ca4:	00800034 	movhi	r2,0
    4ca8:	10965a04 	addi	r2,r2,22888
    4cac:	200b883a 	mov	r5,r4
    4cb0:	11000017 	ldw	r4,0(r2)
    4cb4:	0004dd81 	jmpi	4dd8 <_malloc_r>

00004cb8 <free>:
    4cb8:	00800034 	movhi	r2,0
    4cbc:	10965a04 	addi	r2,r2,22888
    4cc0:	200b883a 	mov	r5,r4
    4cc4:	11000017 	ldw	r4,0(r2)
    4cc8:	0004cf41 	jmpi	4cf4 <_free_r>

00004ccc <memcpy>:
    4ccc:	2005883a 	mov	r2,r4
    4cd0:	2007883a 	mov	r3,r4
    4cd4:	218d883a 	add	r6,r4,r6
    4cd8:	19800526 	beq	r3,r6,4cf0 <memcpy+0x24>
    4cdc:	29000003 	ldbu	r4,0(r5)
    4ce0:	18c00044 	addi	r3,r3,1
    4ce4:	29400044 	addi	r5,r5,1
    4ce8:	193fffc5 	stb	r4,-1(r3)
    4cec:	003ffa06 	br	4cd8 <memcpy+0xc>
    4cf0:	f800283a 	ret

00004cf4 <_free_r>:
    4cf4:	28003726 	beq	r5,zero,4dd4 <_free_r+0xe0>
    4cf8:	28ffff17 	ldw	r3,-4(r5)
    4cfc:	28bfff04 	addi	r2,r5,-4
    4d00:	1800010e 	bge	r3,zero,4d08 <_free_r+0x14>
    4d04:	10c5883a 	add	r2,r2,r3
    4d08:	01400034 	movhi	r5,0
    4d0c:	2956c504 	addi	r5,r5,23316
    4d10:	28c00017 	ldw	r3,0(r5)
    4d14:	280d883a 	mov	r6,r5
    4d18:	1800031e 	bne	r3,zero,4d28 <_free_r+0x34>
    4d1c:	10000115 	stw	zero,4(r2)
    4d20:	28800015 	stw	r2,0(r5)
    4d24:	f800283a 	ret
    4d28:	10c00c2e 	bgeu	r2,r3,4d5c <_free_r+0x68>
    4d2c:	11000017 	ldw	r4,0(r2)
    4d30:	110b883a 	add	r5,r2,r4
    4d34:	1940041e 	bne	r3,r5,4d48 <_free_r+0x54>
    4d38:	19400017 	ldw	r5,0(r3)
    4d3c:	18c00117 	ldw	r3,4(r3)
    4d40:	2909883a 	add	r4,r5,r4
    4d44:	11000015 	stw	r4,0(r2)
    4d48:	10c00115 	stw	r3,4(r2)
    4d4c:	30800015 	stw	r2,0(r6)
    4d50:	f800283a 	ret
    4d54:	11400336 	bltu	r2,r5,4d64 <_free_r+0x70>
    4d58:	2807883a 	mov	r3,r5
    4d5c:	19400117 	ldw	r5,4(r3)
    4d60:	283ffc1e 	bne	r5,zero,4d54 <_free_r+0x60>
    4d64:	19c00017 	ldw	r7,0(r3)
    4d68:	19cd883a 	add	r6,r3,r7
    4d6c:	30800a1e 	bne	r6,r2,4d98 <_free_r+0xa4>
    4d70:	10800017 	ldw	r2,0(r2)
    4d74:	3885883a 	add	r2,r7,r2
    4d78:	18800015 	stw	r2,0(r3)
    4d7c:	1889883a 	add	r4,r3,r2
    4d80:	2900141e 	bne	r5,r4,4dd4 <_free_r+0xe0>
    4d84:	29000017 	ldw	r4,0(r5)
    4d88:	2085883a 	add	r2,r4,r2
    4d8c:	18800015 	stw	r2,0(r3)
    4d90:	28800117 	ldw	r2,4(r5)
    4d94:	00000e06 	br	4dd0 <_free_r+0xdc>
    4d98:	1180032e 	bgeu	r2,r6,4da8 <_free_r+0xb4>
    4d9c:	00800304 	movi	r2,12
    4da0:	20800015 	stw	r2,0(r4)
    4da4:	f800283a 	ret
    4da8:	11000017 	ldw	r4,0(r2)
    4dac:	110d883a 	add	r6,r2,r4
    4db0:	2980061e 	bne	r5,r6,4dcc <_free_r+0xd8>
    4db4:	29800017 	ldw	r6,0(r5)
    4db8:	3109883a 	add	r4,r6,r4
    4dbc:	11000015 	stw	r4,0(r2)
    4dc0:	29000117 	ldw	r4,4(r5)
    4dc4:	11000115 	stw	r4,4(r2)
    4dc8:	00000106 	br	4dd0 <_free_r+0xdc>
    4dcc:	11400115 	stw	r5,4(r2)
    4dd0:	18800115 	stw	r2,4(r3)
    4dd4:	f800283a 	ret

00004dd8 <_malloc_r>:
    4dd8:	defffb04 	addi	sp,sp,-20
    4ddc:	00bfff04 	movi	r2,-4
    4de0:	dc400115 	stw	r17,4(sp)
    4de4:	2c4000c4 	addi	r17,r5,3
    4de8:	88a2703a 	and	r17,r17,r2
    4dec:	dc800215 	stw	r18,8(sp)
    4df0:	dfc00415 	stw	ra,16(sp)
    4df4:	dcc00315 	stw	r19,12(sp)
    4df8:	dc000015 	stw	r16,0(sp)
    4dfc:	8c400204 	addi	r17,r17,8
    4e00:	00800304 	movi	r2,12
    4e04:	2025883a 	mov	r18,r4
    4e08:	8880022e 	bgeu	r17,r2,4e14 <_malloc_r+0x3c>
    4e0c:	1023883a 	mov	r17,r2
    4e10:	00000506 	br	4e28 <_malloc_r+0x50>
    4e14:	8800040e 	bge	r17,zero,4e28 <_malloc_r+0x50>
    4e18:	00800304 	movi	r2,12
    4e1c:	90800015 	stw	r2,0(r18)
    4e20:	0005883a 	mov	r2,zero
    4e24:	00003b06 	br	4f14 <_malloc_r+0x13c>
    4e28:	897ffb36 	bltu	r17,r5,4e18 <_malloc_r+0x40>
    4e2c:	00800034 	movhi	r2,0
    4e30:	1096c504 	addi	r2,r2,23316
    4e34:	10c00017 	ldw	r3,0(r2)
    4e38:	1009883a 	mov	r4,r2
    4e3c:	1821883a 	mov	r16,r3
    4e40:	80000926 	beq	r16,zero,4e68 <_malloc_r+0x90>
    4e44:	80800017 	ldw	r2,0(r16)
    4e48:	1445c83a 	sub	r2,r2,r17
    4e4c:	10001516 	blt	r2,zero,4ea4 <_malloc_r+0xcc>
    4e50:	014002c4 	movi	r5,11
    4e54:	28800d2e 	bgeu	r5,r2,4e8c <_malloc_r+0xb4>
    4e58:	80800015 	stw	r2,0(r16)
    4e5c:	80a1883a 	add	r16,r16,r2
    4e60:	84400015 	stw	r17,0(r16)
    4e64:	8000221e 	bne	r16,zero,4ef0 <_malloc_r+0x118>
    4e68:	04000034 	movhi	r16,0
    4e6c:	8416c404 	addi	r16,r16,23312
    4e70:	80800017 	ldw	r2,0(r16)
    4e74:	10000e1e 	bne	r2,zero,4eb0 <_malloc_r+0xd8>
    4e78:	000b883a 	mov	r5,zero
    4e7c:	9009883a 	mov	r4,r18
    4e80:	0004f300 	call	4f30 <_sbrk_r>
    4e84:	80800015 	stw	r2,0(r16)
    4e88:	00000906 	br	4eb0 <_malloc_r+0xd8>
    4e8c:	80800117 	ldw	r2,4(r16)
    4e90:	1c00021e 	bne	r3,r16,4e9c <_malloc_r+0xc4>
    4e94:	20800015 	stw	r2,0(r4)
    4e98:	00001506 	br	4ef0 <_malloc_r+0x118>
    4e9c:	18800115 	stw	r2,4(r3)
    4ea0:	00001306 	br	4ef0 <_malloc_r+0x118>
    4ea4:	8007883a 	mov	r3,r16
    4ea8:	84000117 	ldw	r16,4(r16)
    4eac:	003fe406 	br	4e40 <_malloc_r+0x68>
    4eb0:	880b883a 	mov	r5,r17
    4eb4:	9009883a 	mov	r4,r18
    4eb8:	0004f300 	call	4f30 <_sbrk_r>
    4ebc:	04ffffc4 	movi	r19,-1
    4ec0:	14ffd526 	beq	r2,r19,4e18 <_malloc_r+0x40>
    4ec4:	140000c4 	addi	r16,r2,3
    4ec8:	00ffff04 	movi	r3,-4
    4ecc:	80e0703a 	and	r16,r16,r3
    4ed0:	1400021e 	bne	r2,r16,4edc <_malloc_r+0x104>
    4ed4:	84400015 	stw	r17,0(r16)
    4ed8:	00000506 	br	4ef0 <_malloc_r+0x118>
    4edc:	808bc83a 	sub	r5,r16,r2
    4ee0:	9009883a 	mov	r4,r18
    4ee4:	0004f300 	call	4f30 <_sbrk_r>
    4ee8:	14fffa1e 	bne	r2,r19,4ed4 <_malloc_r+0xfc>
    4eec:	003fca06 	br	4e18 <_malloc_r+0x40>
    4ef0:	810002c4 	addi	r4,r16,11
    4ef4:	00bffe04 	movi	r2,-8
    4ef8:	80c00104 	addi	r3,r16,4
    4efc:	2084703a 	and	r2,r4,r2
    4f00:	10c7c83a 	sub	r3,r2,r3
    4f04:	18000326 	beq	r3,zero,4f14 <_malloc_r+0x13c>
    4f08:	80e1883a 	add	r16,r16,r3
    4f0c:	00c7c83a 	sub	r3,zero,r3
    4f10:	80c00015 	stw	r3,0(r16)
    4f14:	dfc00417 	ldw	ra,16(sp)
    4f18:	dcc00317 	ldw	r19,12(sp)
    4f1c:	dc800217 	ldw	r18,8(sp)
    4f20:	dc400117 	ldw	r17,4(sp)
    4f24:	dc000017 	ldw	r16,0(sp)
    4f28:	dec00504 	addi	sp,sp,20
    4f2c:	f800283a 	ret

00004f30 <_sbrk_r>:
    4f30:	defffd04 	addi	sp,sp,-12
    4f34:	dc000015 	stw	r16,0(sp)
    4f38:	04000034 	movhi	r16,0
    4f3c:	dc400115 	stw	r17,4(sp)
    4f40:	8416c804 	addi	r16,r16,23328
    4f44:	2023883a 	mov	r17,r4
    4f48:	2809883a 	mov	r4,r5
    4f4c:	dfc00215 	stw	ra,8(sp)
    4f50:	80000015 	stw	zero,0(r16)
    4f54:	00056a40 	call	56a4 <sbrk>
    4f58:	00ffffc4 	movi	r3,-1
    4f5c:	10c0031e 	bne	r2,r3,4f6c <_sbrk_r+0x3c>
    4f60:	80c00017 	ldw	r3,0(r16)
    4f64:	18000126 	beq	r3,zero,4f6c <_sbrk_r+0x3c>
    4f68:	88c00015 	stw	r3,0(r17)
    4f6c:	dfc00217 	ldw	ra,8(sp)
    4f70:	dc400117 	ldw	r17,4(sp)
    4f74:	dc000017 	ldw	r16,0(sp)
    4f78:	dec00304 	addi	sp,sp,12
    4f7c:	f800283a 	ret

00004f80 <__tzcalc_limits>:
    4f80:	deffed04 	addi	sp,sp,-76
    4f84:	ddc01015 	stw	r23,64(sp)
    4f88:	dc400a15 	stw	r17,40(sp)
    4f8c:	dfc01215 	stw	ra,72(sp)
    4f90:	df001115 	stw	fp,68(sp)
    4f94:	dd800f15 	stw	r22,60(sp)
    4f98:	dd400e15 	stw	r21,56(sp)
    4f9c:	dd000d15 	stw	r20,52(sp)
    4fa0:	dcc00c15 	stw	r19,48(sp)
    4fa4:	dc800b15 	stw	r18,44(sp)
    4fa8:	dc000915 	stw	r16,36(sp)
    4fac:	2023883a 	mov	r17,r4
    4fb0:	00052300 	call	5230 <__gettzinfo>
    4fb4:	102f883a 	mov	r23,r2
    4fb8:	0081ec44 	movi	r2,1969
    4fbc:	14408d0e 	bge	r2,r17,51f4 <__tzcalc_limits+0x274>
    4fc0:	8c3e13c4 	addi	r16,r17,-1969
    4fc4:	893e1384 	addi	r4,r17,-1970
    4fc8:	bc400115 	stw	r17,4(r23)
    4fcc:	01405b44 	movi	r5,365
    4fd0:	8021d0ba 	srai	r16,r16,2
    4fd4:	000547c0 	call	547c <__mulsi3>
    4fd8:	893e24c4 	addi	r4,r17,-1901
    4fdc:	017fe704 	movi	r5,-100
    4fe0:	1421883a 	add	r16,r2,r16
    4fe4:	00047680 	call	4768 <__divsi3>
    4fe8:	893e6fc4 	addi	r4,r17,-1601
    4fec:	01406404 	movi	r5,400
    4ff0:	80a1883a 	add	r16,r16,r2
    4ff4:	00047680 	call	4768 <__divsi3>
    4ff8:	8809883a 	mov	r4,r17
    4ffc:	01401904 	movi	r5,100
    5000:	80a1883a 	add	r16,r16,r2
    5004:	00047ec0 	call	47ec <__modsi3>
    5008:	8809883a 	mov	r4,r17
    500c:	01406404 	movi	r5,400
    5010:	d8800115 	stw	r2,4(sp)
    5014:	00047ec0 	call	47ec <__modsi3>
    5018:	1007003a 	cmpeq	r3,r2,zero
    501c:	d8c00415 	stw	r3,16(sp)
    5020:	b8c00304 	addi	r3,r23,12
    5024:	d8c00015 	stw	r3,0(sp)
    5028:	8c4000cc 	andi	r17,r17,3
    502c:	b8c01304 	addi	r3,r23,76
    5030:	d8800215 	stw	r2,8(sp)
    5034:	bd800204 	addi	r22,r23,8
    5038:	bd400604 	addi	r21,r23,24
    503c:	bd000804 	addi	r20,r23,32
    5040:	bcc00704 	addi	r19,r23,28
    5044:	bf000504 	addi	fp,r23,20
    5048:	bc800404 	addi	r18,r23,16
    504c:	d8c00615 	stw	r3,24(sp)
    5050:	dc400515 	stw	r17,20(sp)
    5054:	b0800007 	ldb	r2,0(r22)
    5058:	00c01284 	movi	r3,74
    505c:	10c00e1e 	bne	r2,r3,5098 <__tzcalc_limits+0x118>
    5060:	e0800017 	ldw	r2,0(fp)
    5064:	d8c00517 	ldw	r3,20(sp)
    5068:	808b883a 	add	r5,r16,r2
    506c:	1800021e 	bne	r3,zero,5078 <__tzcalc_limits+0xf8>
    5070:	d8c00117 	ldw	r3,4(sp)
    5074:	1800021e 	bne	r3,zero,5080 <__tzcalc_limits+0x100>
    5078:	d8c00217 	ldw	r3,8(sp)
    507c:	1800021e 	bne	r3,zero,5088 <__tzcalc_limits+0x108>
    5080:	10800f08 	cmpgei	r2,r2,60
    5084:	00000106 	br	508c <__tzcalc_limits+0x10c>
    5088:	0005883a 	mov	r2,zero
    508c:	1145883a 	add	r2,r2,r5
    5090:	113fffc4 	addi	r4,r2,-1
    5094:	00003e06 	br	5190 <__tzcalc_limits+0x210>
    5098:	00c01104 	movi	r3,68
    509c:	10c0031e 	bne	r2,r3,50ac <__tzcalc_limits+0x12c>
    50a0:	e0800017 	ldw	r2,0(fp)
    50a4:	8089883a 	add	r4,r16,r2
    50a8:	00003906 	br	5190 <__tzcalc_limits+0x210>
    50ac:	d8c00517 	ldw	r3,20(sp)
    50b0:	1800041e 	bne	r3,zero,50c4 <__tzcalc_limits+0x144>
    50b4:	d8c00117 	ldw	r3,4(sp)
    50b8:	18000226 	beq	r3,zero,50c4 <__tzcalc_limits+0x144>
    50bc:	01000044 	movi	r4,1
    50c0:	00000106 	br	50c8 <__tzcalc_limits+0x148>
    50c4:	d9000417 	ldw	r4,16(sp)
    50c8:	01400c04 	movi	r5,48
    50cc:	000547c0 	call	547c <__mulsi3>
    50d0:	00c00034 	movhi	r3,0
    50d4:	18d5e604 	addi	r3,r3,22424
    50d8:	1885883a 	add	r2,r3,r2
    50dc:	d8c00017 	ldw	r3,0(sp)
    50e0:	d8800315 	stw	r2,12(sp)
    50e4:	8013883a 	mov	r9,r16
    50e8:	19800017 	ldw	r6,0(r3)
    50ec:	1007883a 	mov	r3,r2
    50f0:	00800044 	movi	r2,1
    50f4:	1180050e 	bge	r2,r6,510c <__tzcalc_limits+0x18c>
    50f8:	19000017 	ldw	r4,0(r3)
    50fc:	10800044 	addi	r2,r2,1
    5100:	18c00104 	addi	r3,r3,4
    5104:	4913883a 	add	r9,r9,r4
    5108:	003ffa06 	br	50f4 <__tzcalc_limits+0x174>
    510c:	3023883a 	mov	r17,r6
    5110:	01800116 	blt	zero,r6,5118 <__tzcalc_limits+0x198>
    5114:	04400044 	movi	r17,1
    5118:	49000104 	addi	r4,r9,4
    511c:	014001c4 	movi	r5,7
    5120:	da400815 	stw	r9,32(sp)
    5124:	00047ec0 	call	47ec <__modsi3>
    5128:	e0c00017 	ldw	r3,0(fp)
    512c:	da400817 	ldw	r9,32(sp)
    5130:	1887c83a 	sub	r3,r3,r2
    5134:	1800010e 	bge	r3,zero,513c <__tzcalc_limits+0x1bc>
    5138:	18c001c4 	addi	r3,r3,7
    513c:	91000017 	ldw	r4,0(r18)
    5140:	014001c4 	movi	r5,7
    5144:	d8c00715 	stw	r3,28(sp)
    5148:	213fffc4 	addi	r4,r4,-1
    514c:	da400815 	stw	r9,32(sp)
    5150:	000547c0 	call	547c <__mulsi3>
    5154:	d8c00717 	ldw	r3,28(sp)
    5158:	da400817 	ldw	r9,32(sp)
    515c:	10c5883a 	add	r2,r2,r3
    5160:	00d00034 	movhi	r3,16384
    5164:	18ffffc4 	addi	r3,r3,-1
    5168:	88cd883a 	add	r6,r17,r3
    516c:	d8c00317 	ldw	r3,12(sp)
    5170:	318d883a 	add	r6,r6,r6
    5174:	318d883a 	add	r6,r6,r6
    5178:	19a3883a 	add	r17,r3,r6
    517c:	88c00017 	ldw	r3,0(r17)
    5180:	10c00216 	blt	r2,r3,518c <__tzcalc_limits+0x20c>
    5184:	10bffe44 	addi	r2,r2,-7
    5188:	003ffd06 	br	5180 <__tzcalc_limits+0x200>
    518c:	4889883a 	add	r4,r9,r2
    5190:	01400074 	movhi	r5,1
    5194:	29546004 	addi	r5,r5,20864
    5198:	000547c0 	call	547c <__mulsi3>
    519c:	a8c00017 	ldw	r3,0(r21)
    51a0:	e7000704 	addi	fp,fp,28
    51a4:	b5800704 	addi	r22,r22,28
    51a8:	10c5883a 	add	r2,r2,r3
    51ac:	a0c00017 	ldw	r3,0(r20)
    51b0:	ad400704 	addi	r21,r21,28
    51b4:	a5000704 	addi	r20,r20,28
    51b8:	10c5883a 	add	r2,r2,r3
    51bc:	d8c00017 	ldw	r3,0(sp)
    51c0:	98800015 	stw	r2,0(r19)
    51c4:	94800704 	addi	r18,r18,28
    51c8:	18c00704 	addi	r3,r3,28
    51cc:	d8c00015 	stw	r3,0(sp)
    51d0:	d8c00617 	ldw	r3,24(sp)
    51d4:	9cc00704 	addi	r19,r19,28
    51d8:	1f3f9e1e 	bne	r3,fp,5054 <__tzcalc_limits+0xd4>
    51dc:	b8800717 	ldw	r2,28(r23)
    51e0:	b8c00e17 	ldw	r3,56(r23)
    51e4:	10c4803a 	cmplt	r2,r2,r3
    51e8:	b8800015 	stw	r2,0(r23)
    51ec:	00800044 	movi	r2,1
    51f0:	00000106 	br	51f8 <__tzcalc_limits+0x278>
    51f4:	0005883a 	mov	r2,zero
    51f8:	dfc01217 	ldw	ra,72(sp)
    51fc:	df001117 	ldw	fp,68(sp)
    5200:	ddc01017 	ldw	r23,64(sp)
    5204:	dd800f17 	ldw	r22,60(sp)
    5208:	dd400e17 	ldw	r21,56(sp)
    520c:	dd000d17 	ldw	r20,52(sp)
    5210:	dcc00c17 	ldw	r19,48(sp)
    5214:	dc800b17 	ldw	r18,44(sp)
    5218:	dc400a17 	ldw	r17,40(sp)
    521c:	dc000917 	ldw	r16,36(sp)
    5220:	dec01304 	addi	sp,sp,76
    5224:	f800283a 	ret

00005228 <__tz_lock>:
    5228:	f800283a 	ret

0000522c <__tz_unlock>:
    522c:	f800283a 	ret

00005230 <__gettzinfo>:
    5230:	00800034 	movhi	r2,0
    5234:	1095ff04 	addi	r2,r2,22524
    5238:	f800283a 	ret

0000523c <gmtime_r>:
    523c:	defff904 	addi	sp,sp,-28
    5240:	dc400115 	stw	r17,4(sp)
    5244:	24400017 	ldw	r17,0(r4)
    5248:	dc800215 	stw	r18,8(sp)
    524c:	2825883a 	mov	r18,r5
    5250:	01400074 	movhi	r5,1
    5254:	8809883a 	mov	r4,r17
    5258:	29546004 	addi	r5,r5,20864
    525c:	dfc00615 	stw	ra,24(sp)
    5260:	dc000015 	stw	r16,0(sp)
    5264:	dd400515 	stw	r21,20(sp)
    5268:	dd000415 	stw	r20,16(sp)
    526c:	dcc00315 	stw	r19,12(sp)
    5270:	00047680 	call	4768 <__divsi3>
    5274:	01400074 	movhi	r5,1
    5278:	8809883a 	mov	r4,r17
    527c:	29546004 	addi	r5,r5,20864
    5280:	1021883a 	mov	r16,r2
    5284:	00047ec0 	call	47ec <__modsi3>
    5288:	1023883a 	mov	r17,r2
    528c:	10000216 	blt	r2,zero,5298 <gmtime_r+0x5c>
    5290:	84353dc4 	addi	r16,r16,-11017
    5294:	00000406 	br	52a8 <gmtime_r+0x6c>
    5298:	00800074 	movhi	r2,1
    529c:	10946004 	addi	r2,r2,20864
    52a0:	88a3883a 	add	r17,r17,r2
    52a4:	84353d84 	addi	r16,r16,-11018
    52a8:	8809883a 	mov	r4,r17
    52ac:	01438404 	movi	r5,3600
    52b0:	00047680 	call	4768 <__divsi3>
    52b4:	8809883a 	mov	r4,r17
    52b8:	01438404 	movi	r5,3600
    52bc:	90800215 	stw	r2,8(r18)
    52c0:	00047ec0 	call	47ec <__modsi3>
    52c4:	01400f04 	movi	r5,60
    52c8:	1009883a 	mov	r4,r2
    52cc:	1023883a 	mov	r17,r2
    52d0:	00047680 	call	4768 <__divsi3>
    52d4:	01400f04 	movi	r5,60
    52d8:	8809883a 	mov	r4,r17
    52dc:	90800115 	stw	r2,4(r18)
    52e0:	00047ec0 	call	47ec <__modsi3>
    52e4:	90800015 	stw	r2,0(r18)
    52e8:	014001c4 	movi	r5,7
    52ec:	810000c4 	addi	r4,r16,3
    52f0:	00047ec0 	call	47ec <__modsi3>
    52f4:	1000010e 	bge	r2,zero,52fc <gmtime_r+0xc0>
    52f8:	108001c4 	addi	r2,r2,7
    52fc:	90800615 	stw	r2,24(r18)
    5300:	8000050e 	bge	r16,zero,5318 <gmtime_r+0xdc>
    5304:	008000b4 	movhi	r2,2
    5308:	108eac44 	addi	r2,r2,15025
    530c:	80a1883a 	add	r16,r16,r2
    5310:	057fffc4 	movi	r21,-1
    5314:	00000106 	br	531c <gmtime_r+0xe0>
    5318:	002b883a 	mov	r21,zero
    531c:	0163ab14 	movui	r5,36524
    5320:	8009883a 	mov	r4,r16
    5324:	00047680 	call	4768 <__divsi3>
    5328:	1023883a 	mov	r17,r2
    532c:	00800104 	movi	r2,4
    5330:	8880011e 	bne	r17,r2,5338 <gmtime_r+0xfc>
    5334:	044000c4 	movi	r17,3
    5338:	017ffff4 	movhi	r5,65535
    533c:	295c5504 	addi	r5,r5,29012
    5340:	8809883a 	mov	r4,r17
    5344:	000547c0 	call	547c <__mulsi3>
    5348:	1421883a 	add	r16,r2,r16
    534c:	8009883a 	mov	r4,r16
    5350:	01416d44 	movi	r5,1461
    5354:	00047680 	call	4768 <__divsi3>
    5358:	017e92c4 	movi	r5,-1461
    535c:	1009883a 	mov	r4,r2
    5360:	1029883a 	mov	r20,r2
    5364:	000547c0 	call	547c <__mulsi3>
    5368:	1421883a 	add	r16,r2,r16
    536c:	01405b44 	movi	r5,365
    5370:	8009883a 	mov	r4,r16
    5374:	00047680 	call	4768 <__divsi3>
    5378:	1027883a 	mov	r19,r2
    537c:	00800104 	movi	r2,4
    5380:	9880011e 	bne	r19,r2,5388 <gmtime_r+0x14c>
    5384:	04c000c4 	movi	r19,3
    5388:	017fa4c4 	movi	r5,-365
    538c:	9809883a 	mov	r4,r19
    5390:	000547c0 	call	547c <__mulsi3>
    5394:	a809883a 	mov	r4,r21
    5398:	01406404 	movi	r5,400
    539c:	1421883a 	add	r16,r2,r16
    53a0:	000547c0 	call	547c <__mulsi3>
    53a4:	01401904 	movi	r5,100
    53a8:	8809883a 	mov	r4,r17
    53ac:	1541f404 	addi	r21,r2,2000
    53b0:	000547c0 	call	547c <__mulsi3>
    53b4:	a507883a 	add	r3,r20,r20
    53b8:	a885883a 	add	r2,r21,r2
    53bc:	18c7883a 	add	r3,r3,r3
    53c0:	10c5883a 	add	r2,r2,r3
    53c4:	14c5883a 	add	r2,r2,r19
    53c8:	9800031e 	bne	r19,zero,53d8 <gmtime_r+0x19c>
    53cc:	a000041e 	bne	r20,zero,53e0 <gmtime_r+0x1a4>
    53d0:	8823003a 	cmpeq	r17,r17,zero
    53d4:	00000306 	br	53e4 <gmtime_r+0x1a8>
    53d8:	0023883a 	mov	r17,zero
    53dc:	00000106 	br	53e4 <gmtime_r+0x1a8>
    53e0:	04400044 	movi	r17,1
    53e4:	80c00ec4 	addi	r3,r16,59
    53e8:	1c47883a 	add	r3,r3,r17
    53ec:	89005b04 	addi	r4,r17,364
    53f0:	20c0030e 	bge	r4,r3,5400 <gmtime_r+0x1c4>
    53f4:	8c405b44 	addi	r17,r17,365
    53f8:	1c47c83a 	sub	r3,r3,r17
    53fc:	10800044 	addi	r2,r2,1
    5400:	10be2504 	addi	r2,r2,-1900
    5404:	01000034 	movhi	r4,0
    5408:	90800515 	stw	r2,20(r18)
    540c:	90c00715 	stw	r3,28(r18)
    5410:	00800084 	movi	r2,2
    5414:	2115f204 	addi	r4,r4,22472
    5418:	014002c4 	movi	r5,11
    541c:	1087883a 	add	r3,r2,r2
    5420:	18c7883a 	add	r3,r3,r3
    5424:	1907883a 	add	r3,r3,r4
    5428:	18c00017 	ldw	r3,0(r3)
    542c:	80c00516 	blt	r16,r3,5444 <gmtime_r+0x208>
    5430:	10800044 	addi	r2,r2,1
    5434:	80e1c83a 	sub	r16,r16,r3
    5438:	28bff80e 	bge	r5,r2,541c <gmtime_r+0x1e0>
    543c:	0005883a 	mov	r2,zero
    5440:	003ff606 	br	541c <gmtime_r+0x1e0>
    5444:	90800415 	stw	r2,16(r18)
    5448:	84000044 	addi	r16,r16,1
    544c:	9005883a 	mov	r2,r18
    5450:	94000315 	stw	r16,12(r18)
    5454:	90000815 	stw	zero,32(r18)
    5458:	dfc00617 	ldw	ra,24(sp)
    545c:	dd400517 	ldw	r21,20(sp)
    5460:	dd000417 	ldw	r20,16(sp)
    5464:	dcc00317 	ldw	r19,12(sp)
    5468:	dc800217 	ldw	r18,8(sp)
    546c:	dc400117 	ldw	r17,4(sp)
    5470:	dc000017 	ldw	r16,0(sp)
    5474:	dec00704 	addi	sp,sp,28
    5478:	f800283a 	ret

0000547c <__mulsi3>:
    547c:	0005883a 	mov	r2,zero
    5480:	20000726 	beq	r4,zero,54a0 <__mulsi3+0x24>
    5484:	20c0004c 	andi	r3,r4,1
    5488:	2008d07a 	srli	r4,r4,1
    548c:	18000126 	beq	r3,zero,5494 <__mulsi3+0x18>
    5490:	1145883a 	add	r2,r2,r5
    5494:	294b883a 	add	r5,r5,r5
    5498:	203ffa1e 	bne	r4,zero,5484 <__mulsi3+0x8>
    549c:	f800283a 	ret
    54a0:	f800283a 	ret

000054a4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    54a4:	00055301 	jmpi	5530 <alt_iic_isr_register>

000054a8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54a8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54ac:	00bfff84 	movi	r2,-2
    54b0:	2084703a 	and	r2,r4,r2
    54b4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    54b8:	00c00044 	movi	r3,1
    54bc:	d0a08217 	ldw	r2,-32248(gp)
    54c0:	194a983a 	sll	r5,r3,r5
    54c4:	288ab03a 	or	r5,r5,r2
    54c8:	d1608215 	stw	r5,-32248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    54cc:	d0a08217 	ldw	r2,-32248(gp)
    54d0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    54d4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    54d8:	0005883a 	mov	r2,zero
    54dc:	f800283a 	ret

000054e0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54e0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54e4:	00bfff84 	movi	r2,-2
    54e8:	2084703a 	and	r2,r4,r2
    54ec:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    54f0:	00ffff84 	movi	r3,-2
    54f4:	d0a08217 	ldw	r2,-32248(gp)
    54f8:	194a183a 	rol	r5,r3,r5
    54fc:	288a703a 	and	r5,r5,r2
    5500:	d1608215 	stw	r5,-32248(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5504:	d0a08217 	ldw	r2,-32248(gp)
    5508:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    550c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5510:	0005883a 	mov	r2,zero
    5514:	f800283a 	ret

00005518 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5518:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    551c:	00800044 	movi	r2,1
    5520:	1144983a 	sll	r2,r2,r5
    5524:	10c4703a 	and	r2,r2,r3
}
    5528:	1004c03a 	cmpne	r2,r2,zero
    552c:	f800283a 	ret

00005530 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5530:	00c007c4 	movi	r3,31
    5534:	19401616 	blt	r3,r5,5590 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5538:	defffe04 	addi	sp,sp,-8
    553c:	dfc00115 	stw	ra,4(sp)
    5540:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5544:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5548:	00ffff84 	movi	r3,-2
    554c:	80c6703a 	and	r3,r16,r3
    5550:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    5554:	280490fa 	slli	r2,r5,3
    5558:	00c00034 	movhi	r3,0
    555c:	18d6e404 	addi	r3,r3,23440
    5560:	1885883a 	add	r2,r3,r2
    5564:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5568:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    556c:	30000226 	beq	r6,zero,5578 <alt_iic_isr_register+0x48>
    5570:	00054a80 	call	54a8 <alt_ic_irq_enable>
    5574:	00000106 	br	557c <alt_iic_isr_register+0x4c>
    5578:	00054e00 	call	54e0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    557c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    5580:	dfc00117 	ldw	ra,4(sp)
    5584:	dc000017 	ldw	r16,0(sp)
    5588:	dec00204 	addi	sp,sp,8
    558c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    5590:	00bffa84 	movi	r2,-22
    5594:	f800283a 	ret

00005598 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5598:	deffff04 	addi	sp,sp,-4
    559c:	01000034 	movhi	r4,0
    55a0:	01400034 	movhi	r5,0
    55a4:	dfc00015 	stw	ra,0(sp)
    55a8:	2115ff04 	addi	r4,r4,22524
    55ac:	29565e04 	addi	r5,r5,22904

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    55b0:	2140061e 	bne	r4,r5,55cc <alt_load+0x34>
    55b4:	01000034 	movhi	r4,0
    55b8:	01400034 	movhi	r5,0
    55bc:	21100804 	addi	r4,r4,16416
    55c0:	29500804 	addi	r5,r5,16416
    55c4:	2140121e 	bne	r4,r5,5610 <alt_load+0x78>
    55c8:	00000b06 	br	55f8 <alt_load+0x60>
    55cc:	00c00034 	movhi	r3,0
    55d0:	18d65e04 	addi	r3,r3,22904
    55d4:	1907c83a 	sub	r3,r3,r4
    55d8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    55dc:	10fff526 	beq	r2,r3,55b4 <alt_load+0x1c>
    {
      *to++ = *from++;
    55e0:	114f883a 	add	r7,r2,r5
    55e4:	39c00017 	ldw	r7,0(r7)
    55e8:	110d883a 	add	r6,r2,r4
    55ec:	10800104 	addi	r2,r2,4
    55f0:	31c00015 	stw	r7,0(r6)
    55f4:	003ff906 	br	55dc <alt_load+0x44>
    55f8:	01000034 	movhi	r4,0
    55fc:	01400034 	movhi	r5,0
    5600:	2115e604 	addi	r4,r4,22424
    5604:	2955e604 	addi	r5,r5,22424

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5608:	2140101e 	bne	r4,r5,564c <alt_load+0xb4>
    560c:	00000b06 	br	563c <alt_load+0xa4>
    5610:	00c00034 	movhi	r3,0
    5614:	18d06004 	addi	r3,r3,16768
    5618:	1907c83a 	sub	r3,r3,r4
    561c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5620:	10fff526 	beq	r2,r3,55f8 <alt_load+0x60>
    {
      *to++ = *from++;
    5624:	114f883a 	add	r7,r2,r5
    5628:	39c00017 	ldw	r7,0(r7)
    562c:	110d883a 	add	r6,r2,r4
    5630:	10800104 	addi	r2,r2,4
    5634:	31c00015 	stw	r7,0(r6)
    5638:	003ff906 	br	5620 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    563c:	00057140 	call	5714 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5640:	dfc00017 	ldw	ra,0(sp)
    5644:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5648:	00057181 	jmpi	5718 <alt_icache_flush_all>
    564c:	00c00034 	movhi	r3,0
    5650:	18d5ff04 	addi	r3,r3,22524
    5654:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5658:	0005883a 	mov	r2,zero
  {
    while( to != end )
    565c:	18bff726 	beq	r3,r2,563c <alt_load+0xa4>
    {
      *to++ = *from++;
    5660:	114f883a 	add	r7,r2,r5
    5664:	39c00017 	ldw	r7,0(r7)
    5668:	110d883a 	add	r6,r2,r4
    566c:	10800104 	addi	r2,r2,4
    5670:	31c00015 	stw	r7,0(r6)
    5674:	003ff906 	br	565c <alt_load+0xc4>

00005678 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5678:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    567c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5680:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5684:	00056f00 	call	56f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5688:	00057100 	call	5710 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    568c:	d1a08317 	ldw	r6,-32244(gp)
    5690:	d1608417 	ldw	r5,-32240(gp)
    5694:	d1208517 	ldw	r4,-32236(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5698:	dfc00017 	ldw	ra,0(sp)
    569c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    56a0:	00046dc1 	jmpi	46dc <main>

000056a4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    56a4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56a8:	00bfff84 	movi	r2,-2
    56ac:	2884703a 	and	r2,r5,r2
    56b0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    56b4:	d0a01517 	ldw	r2,-32684(gp)
    56b8:	00ffff04 	movi	r3,-4
    56bc:	108000c4 	addi	r2,r2,3
    56c0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    56c4:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    56c8:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    56cc:	1109883a 	add	r4,r2,r4
    56d0:	18d80004 	addi	r3,r3,24576
    56d4:	1900032e 	bgeu	r3,r4,56e4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56d8:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    56dc:	00bfffc4 	movi	r2,-1
    56e0:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    56e4:	d1201515 	stw	r4,-32684(gp)
    56e8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    56ec:	f800283a 	ret

000056f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    56f0:	deffff04 	addi	sp,sp,-4
    56f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    56f8:	00057900 	call	5790 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    56fc:	00800044 	movi	r2,1
    5700:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5704:	dfc00017 	ldw	ra,0(sp)
    5708:	dec00104 	addi	sp,sp,4
    570c:	f800283a 	ret

00005710 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5710:	f800283a 	ret

00005714 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5714:	f800283a 	ret

00005718 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5718:	f800283a 	ret

0000571c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    571c:	213ffe84 	addi	r4,r4,-6
    5720:	008003c4 	movi	r2,15
    5724:	11001636 	bltu	r2,r4,5780 <alt_exception_cause_generated_bad_addr+0x64>
    5728:	200890ba 	slli	r4,r4,2
    572c:	00800034 	movhi	r2,0
    5730:	1095d004 	addi	r2,r2,22336
    5734:	2089883a 	add	r4,r4,r2
    5738:	20800017 	ldw	r2,0(r4)
    573c:	1000683a 	jmp	r2
    5740:	00005788 	cmpgei	zero,zero,350
    5744:	00005788 	cmpgei	zero,zero,350
    5748:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    574c:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    5750:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    5754:	00005788 	cmpgei	zero,zero,350
    5758:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    575c:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    5760:	00005788 	cmpgei	zero,zero,350
    5764:	00005788 	cmpgei	zero,zero,350
    5768:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    576c:	00005788 	cmpgei	zero,zero,350
    5770:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    5774:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    5778:	00005780 	call	578 <__alt_mem_onchip_memory2_0-0x3a88>
    577c:	00005788 	cmpgei	zero,zero,350
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5780:	0005883a 	mov	r2,zero
    5784:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5788:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    578c:	f800283a 	ret

00005790 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5790:	000170fa 	wrctl	ienable,zero
    5794:	f800283a 	ret
